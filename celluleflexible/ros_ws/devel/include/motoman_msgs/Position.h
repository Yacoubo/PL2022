// Generated by gencpp from file motoman_msgs/Position.msg
// DO NOT EDIT!


#ifndef MOTOMAN_MSGS_MESSAGE_POSITION_H
#define MOTOMAN_MSGS_MESSAGE_POSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motoman_msgs
{
template <class ContainerAllocator>
struct Position_
{
  typedef Position_<ContainerAllocator> Type;

  Position_()
    : pos_s(0.0)
    , pos_l(0.0)
    , pos_u(0.0)
    , pos_r(0.0)
    , pos_b(0.0)
    , pos_t(0.0)
    , pos_x(0.0)
    , pos_y(0.0)
    , pos_z(0.0)
    , rot_x(0.0)
    , rot_y(0.0)
    , rot_z(0.0)
    , rot_e(0.0)  {
    }
  Position_(const ContainerAllocator& _alloc)
    : pos_s(0.0)
    , pos_l(0.0)
    , pos_u(0.0)
    , pos_r(0.0)
    , pos_b(0.0)
    , pos_t(0.0)
    , pos_x(0.0)
    , pos_y(0.0)
    , pos_z(0.0)
    , rot_x(0.0)
    , rot_y(0.0)
    , rot_z(0.0)
    , rot_e(0.0)  {
  (void)_alloc;
    }



   typedef float _pos_s_type;
  _pos_s_type pos_s;

   typedef float _pos_l_type;
  _pos_l_type pos_l;

   typedef float _pos_u_type;
  _pos_u_type pos_u;

   typedef float _pos_r_type;
  _pos_r_type pos_r;

   typedef float _pos_b_type;
  _pos_b_type pos_b;

   typedef float _pos_t_type;
  _pos_t_type pos_t;

   typedef float _pos_x_type;
  _pos_x_type pos_x;

   typedef float _pos_y_type;
  _pos_y_type pos_y;

   typedef float _pos_z_type;
  _pos_z_type pos_z;

   typedef float _rot_x_type;
  _rot_x_type rot_x;

   typedef float _rot_y_type;
  _rot_y_type rot_y;

   typedef float _rot_z_type;
  _rot_z_type rot_z;

   typedef float _rot_e_type;
  _rot_e_type rot_e;





  typedef boost::shared_ptr< ::motoman_msgs::Position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motoman_msgs::Position_<ContainerAllocator> const> ConstPtr;

}; // struct Position_

typedef ::motoman_msgs::Position_<std::allocator<void> > Position;

typedef boost::shared_ptr< ::motoman_msgs::Position > PositionPtr;
typedef boost::shared_ptr< ::motoman_msgs::Position const> PositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motoman_msgs::Position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motoman_msgs::Position_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motoman_msgs::Position_<ContainerAllocator1> & lhs, const ::motoman_msgs::Position_<ContainerAllocator2> & rhs)
{
  return lhs.pos_s == rhs.pos_s &&
    lhs.pos_l == rhs.pos_l &&
    lhs.pos_u == rhs.pos_u &&
    lhs.pos_r == rhs.pos_r &&
    lhs.pos_b == rhs.pos_b &&
    lhs.pos_t == rhs.pos_t &&
    lhs.pos_x == rhs.pos_x &&
    lhs.pos_y == rhs.pos_y &&
    lhs.pos_z == rhs.pos_z &&
    lhs.rot_x == rhs.rot_x &&
    lhs.rot_y == rhs.rot_y &&
    lhs.rot_z == rhs.rot_z &&
    lhs.rot_e == rhs.rot_e;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motoman_msgs::Position_<ContainerAllocator1> & lhs, const ::motoman_msgs::Position_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motoman_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::motoman_msgs::Position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motoman_msgs::Position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motoman_msgs::Position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motoman_msgs::Position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motoman_msgs::Position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motoman_msgs::Position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motoman_msgs::Position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "378caabb3677791055a99642b77226da";
  }

  static const char* value(const ::motoman_msgs::Position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x378caabb36777910ULL;
  static const uint64_t static_value2 = 0x55a99642b77226daULL;
};

template<class ContainerAllocator>
struct DataType< ::motoman_msgs::Position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motoman_msgs/Position";
  }

  static const char* value(const ::motoman_msgs::Position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motoman_msgs::Position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Position des axes en degrés\n"
"float32 pos_s\n"
"float32 pos_l\n"
"float32 pos_u\n"
"float32 pos_r\n"
"float32 pos_b\n"
"float32 pos_t\n"
"#Position du manipulateur en mm\n"
"float32 pos_x\n"
"float32 pos_y\n"
"float32 pos_z\n"
"#Orientation du manipulateur en degrés\n"
"float32 rot_x\n"
"float32 rot_y\n"
"float32 rot_z\n"
"float32 rot_e \n"
;
  }

  static const char* value(const ::motoman_msgs::Position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motoman_msgs::Position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos_s);
      stream.next(m.pos_l);
      stream.next(m.pos_u);
      stream.next(m.pos_r);
      stream.next(m.pos_b);
      stream.next(m.pos_t);
      stream.next(m.pos_x);
      stream.next(m.pos_y);
      stream.next(m.pos_z);
      stream.next(m.rot_x);
      stream.next(m.rot_y);
      stream.next(m.rot_z);
      stream.next(m.rot_e);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motoman_msgs::Position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motoman_msgs::Position_<ContainerAllocator>& v)
  {
    s << indent << "pos_s: ";
    Printer<float>::stream(s, indent + "  ", v.pos_s);
    s << indent << "pos_l: ";
    Printer<float>::stream(s, indent + "  ", v.pos_l);
    s << indent << "pos_u: ";
    Printer<float>::stream(s, indent + "  ", v.pos_u);
    s << indent << "pos_r: ";
    Printer<float>::stream(s, indent + "  ", v.pos_r);
    s << indent << "pos_b: ";
    Printer<float>::stream(s, indent + "  ", v.pos_b);
    s << indent << "pos_t: ";
    Printer<float>::stream(s, indent + "  ", v.pos_t);
    s << indent << "pos_x: ";
    Printer<float>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pos_y: ";
    Printer<float>::stream(s, indent + "  ", v.pos_y);
    s << indent << "pos_z: ";
    Printer<float>::stream(s, indent + "  ", v.pos_z);
    s << indent << "rot_x: ";
    Printer<float>::stream(s, indent + "  ", v.rot_x);
    s << indent << "rot_y: ";
    Printer<float>::stream(s, indent + "  ", v.rot_y);
    s << indent << "rot_z: ";
    Printer<float>::stream(s, indent + "  ", v.rot_z);
    s << indent << "rot_e: ";
    Printer<float>::stream(s, indent + "  ", v.rot_e);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOMAN_MSGS_MESSAGE_POSITION_H
