// Generated by gencpp from file motoman_msgs/Effort.msg
// DO NOT EDIT!


#ifndef MOTOMAN_MSGS_MESSAGE_EFFORT_H
#define MOTOMAN_MSGS_MESSAGE_EFFORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motoman_msgs
{
template <class ContainerAllocator>
struct Effort_
{
  typedef Effort_<ContainerAllocator> Type;

  Effort_()
    : CoupleJoints()
    , CoupleTCP()
    , ForceTCP()
    , ForceTotaleTCP(0.0)  {
    }
  Effort_(const ContainerAllocator& _alloc)
    : CoupleJoints(_alloc)
    , CoupleTCP(_alloc)
    , ForceTCP(_alloc)
    , ForceTotaleTCP(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _CoupleJoints_type;
  _CoupleJoints_type CoupleJoints;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _CoupleTCP_type;
  _CoupleTCP_type CoupleTCP;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ForceTCP_type;
  _ForceTCP_type ForceTCP;

   typedef float _ForceTotaleTCP_type;
  _ForceTotaleTCP_type ForceTotaleTCP;





  typedef boost::shared_ptr< ::motoman_msgs::Effort_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motoman_msgs::Effort_<ContainerAllocator> const> ConstPtr;

}; // struct Effort_

typedef ::motoman_msgs::Effort_<std::allocator<void> > Effort;

typedef boost::shared_ptr< ::motoman_msgs::Effort > EffortPtr;
typedef boost::shared_ptr< ::motoman_msgs::Effort const> EffortConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motoman_msgs::Effort_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motoman_msgs::Effort_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motoman_msgs::Effort_<ContainerAllocator1> & lhs, const ::motoman_msgs::Effort_<ContainerAllocator2> & rhs)
{
  return lhs.CoupleJoints == rhs.CoupleJoints &&
    lhs.CoupleTCP == rhs.CoupleTCP &&
    lhs.ForceTCP == rhs.ForceTCP &&
    lhs.ForceTotaleTCP == rhs.ForceTotaleTCP;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motoman_msgs::Effort_<ContainerAllocator1> & lhs, const ::motoman_msgs::Effort_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motoman_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::motoman_msgs::Effort_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motoman_msgs::Effort_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motoman_msgs::Effort_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motoman_msgs::Effort_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motoman_msgs::Effort_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motoman_msgs::Effort_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motoman_msgs::Effort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec8a1ea51e29ab76506e373b4ea606f9";
  }

  static const char* value(const ::motoman_msgs::Effort_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec8a1ea51e29ab76ULL;
  static const uint64_t static_value2 = 0x506e373b4ea606f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::motoman_msgs::Effort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motoman_msgs/Effort";
  }

  static const char* value(const ::motoman_msgs::Effort_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motoman_msgs::Effort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Couple des axes\n"
"float32[] CoupleJoints\n"
"\n"
"#Couple de la TCP\n"
"float32[] CoupleTCP\n"
"\n"
"#Forces de la TCP\n"
"float32[] ForceTCP\n"
"\n"
"#Force resultante de la TCP\n"
"float32 ForceTotaleTCP\n"
;
  }

  static const char* value(const ::motoman_msgs::Effort_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motoman_msgs::Effort_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.CoupleJoints);
      stream.next(m.CoupleTCP);
      stream.next(m.ForceTCP);
      stream.next(m.ForceTotaleTCP);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Effort_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motoman_msgs::Effort_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motoman_msgs::Effort_<ContainerAllocator>& v)
  {
    s << indent << "CoupleJoints[]" << std::endl;
    for (size_t i = 0; i < v.CoupleJoints.size(); ++i)
    {
      s << indent << "  CoupleJoints[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.CoupleJoints[i]);
    }
    s << indent << "CoupleTCP[]" << std::endl;
    for (size_t i = 0; i < v.CoupleTCP.size(); ++i)
    {
      s << indent << "  CoupleTCP[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.CoupleTCP[i]);
    }
    s << indent << "ForceTCP[]" << std::endl;
    for (size_t i = 0; i < v.ForceTCP.size(); ++i)
    {
      s << indent << "  ForceTCP[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ForceTCP[i]);
    }
    s << indent << "ForceTotaleTCP: ";
    Printer<float>::stream(s, indent + "  ", v.ForceTotaleTCP);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOMAN_MSGS_MESSAGE_EFFORT_H
