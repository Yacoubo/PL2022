// Generated by gencpp from file motoman_msgs/Vitesse.msg
// DO NOT EDIT!


#ifndef MOTOMAN_MSGS_MESSAGE_VITESSE_H
#define MOTOMAN_MSGS_MESSAGE_VITESSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motoman_msgs
{
template <class ContainerAllocator>
struct Vitesse_
{
  typedef Vitesse_<ContainerAllocator> Type;

  Vitesse_()
    : vit_s(0.0)
    , vit_l(0.0)
    , vit_u(0.0)
    , vit_r(0.0)
    , vit_b(0.0)
    , vit_t(0.0)
    , vit_tcp(0.0)  {
    }
  Vitesse_(const ContainerAllocator& _alloc)
    : vit_s(0.0)
    , vit_l(0.0)
    , vit_u(0.0)
    , vit_r(0.0)
    , vit_b(0.0)
    , vit_t(0.0)
    , vit_tcp(0.0)  {
  (void)_alloc;
    }



   typedef float _vit_s_type;
  _vit_s_type vit_s;

   typedef float _vit_l_type;
  _vit_l_type vit_l;

   typedef float _vit_u_type;
  _vit_u_type vit_u;

   typedef float _vit_r_type;
  _vit_r_type vit_r;

   typedef float _vit_b_type;
  _vit_b_type vit_b;

   typedef float _vit_t_type;
  _vit_t_type vit_t;

   typedef float _vit_tcp_type;
  _vit_tcp_type vit_tcp;





  typedef boost::shared_ptr< ::motoman_msgs::Vitesse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motoman_msgs::Vitesse_<ContainerAllocator> const> ConstPtr;

}; // struct Vitesse_

typedef ::motoman_msgs::Vitesse_<std::allocator<void> > Vitesse;

typedef boost::shared_ptr< ::motoman_msgs::Vitesse > VitessePtr;
typedef boost::shared_ptr< ::motoman_msgs::Vitesse const> VitesseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motoman_msgs::Vitesse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motoman_msgs::Vitesse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motoman_msgs::Vitesse_<ContainerAllocator1> & lhs, const ::motoman_msgs::Vitesse_<ContainerAllocator2> & rhs)
{
  return lhs.vit_s == rhs.vit_s &&
    lhs.vit_l == rhs.vit_l &&
    lhs.vit_u == rhs.vit_u &&
    lhs.vit_r == rhs.vit_r &&
    lhs.vit_b == rhs.vit_b &&
    lhs.vit_t == rhs.vit_t &&
    lhs.vit_tcp == rhs.vit_tcp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motoman_msgs::Vitesse_<ContainerAllocator1> & lhs, const ::motoman_msgs::Vitesse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motoman_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::motoman_msgs::Vitesse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motoman_msgs::Vitesse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motoman_msgs::Vitesse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motoman_msgs::Vitesse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motoman_msgs::Vitesse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motoman_msgs::Vitesse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motoman_msgs::Vitesse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "52d3ce6c29b4c50bf41f808ef8927416";
  }

  static const char* value(const ::motoman_msgs::Vitesse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x52d3ce6c29b4c50bULL;
  static const uint64_t static_value2 = 0xf41f808ef8927416ULL;
};

template<class ContainerAllocator>
struct DataType< ::motoman_msgs::Vitesse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motoman_msgs/Vitesse";
  }

  static const char* value(const ::motoman_msgs::Vitesse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motoman_msgs::Vitesse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Vitesse des axes en 0.0001 deg/sec\n"
"float32 vit_s\n"
"float32 vit_l\n"
"float32 vit_u\n"
"float32 vit_r\n"
"float32 vit_b\n"
"float32 vit_t\n"
"#Vitesse de la TCP\n"
"float32 vit_tcp\n"
;
  }

  static const char* value(const ::motoman_msgs::Vitesse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motoman_msgs::Vitesse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vit_s);
      stream.next(m.vit_l);
      stream.next(m.vit_u);
      stream.next(m.vit_r);
      stream.next(m.vit_b);
      stream.next(m.vit_t);
      stream.next(m.vit_tcp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vitesse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motoman_msgs::Vitesse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motoman_msgs::Vitesse_<ContainerAllocator>& v)
  {
    s << indent << "vit_s: ";
    Printer<float>::stream(s, indent + "  ", v.vit_s);
    s << indent << "vit_l: ";
    Printer<float>::stream(s, indent + "  ", v.vit_l);
    s << indent << "vit_u: ";
    Printer<float>::stream(s, indent + "  ", v.vit_u);
    s << indent << "vit_r: ";
    Printer<float>::stream(s, indent + "  ", v.vit_r);
    s << indent << "vit_b: ";
    Printer<float>::stream(s, indent + "  ", v.vit_b);
    s << indent << "vit_t: ";
    Printer<float>::stream(s, indent + "  ", v.vit_t);
    s << indent << "vit_tcp: ";
    Printer<float>::stream(s, indent + "  ", v.vit_tcp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOMAN_MSGS_MESSAGE_VITESSE_H
