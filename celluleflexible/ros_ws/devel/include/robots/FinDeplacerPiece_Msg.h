// Generated by gencpp from file robots/FinDeplacerPiece_Msg.msg
// DO NOT EDIT!


#ifndef ROBOTS_MESSAGE_FINDEPLACERPIECE_MSG_H
#define ROBOTS_MESSAGE_FINDEPLACERPIECE_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace robots
{
template <class ContainerAllocator>
struct FinDeplacerPiece_Msg_
{
  typedef FinDeplacerPiece_Msg_<ContainerAllocator> Type;

  FinDeplacerPiece_Msg_()
    : header()
    , FinDeplacerR1(0)
    , FinDeplacerR4(0)  {
    }
  FinDeplacerPiece_Msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , FinDeplacerR1(0)
    , FinDeplacerR4(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _FinDeplacerR1_type;
  _FinDeplacerR1_type FinDeplacerR1;

   typedef int32_t _FinDeplacerR4_type;
  _FinDeplacerR4_type FinDeplacerR4;





  typedef boost::shared_ptr< ::robots::FinDeplacerPiece_Msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robots::FinDeplacerPiece_Msg_<ContainerAllocator> const> ConstPtr;

}; // struct FinDeplacerPiece_Msg_

typedef ::robots::FinDeplacerPiece_Msg_<std::allocator<void> > FinDeplacerPiece_Msg;

typedef boost::shared_ptr< ::robots::FinDeplacerPiece_Msg > FinDeplacerPiece_MsgPtr;
typedef boost::shared_ptr< ::robots::FinDeplacerPiece_Msg const> FinDeplacerPiece_MsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robots::FinDeplacerPiece_Msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robots::FinDeplacerPiece_Msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robots::FinDeplacerPiece_Msg_<ContainerAllocator1> & lhs, const ::robots::FinDeplacerPiece_Msg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.FinDeplacerR1 == rhs.FinDeplacerR1 &&
    lhs.FinDeplacerR4 == rhs.FinDeplacerR4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robots::FinDeplacerPiece_Msg_<ContainerAllocator1> & lhs, const ::robots::FinDeplacerPiece_Msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robots

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robots::FinDeplacerPiece_Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots::FinDeplacerPiece_Msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots::FinDeplacerPiece_Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots::FinDeplacerPiece_Msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots::FinDeplacerPiece_Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots::FinDeplacerPiece_Msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robots::FinDeplacerPiece_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9603ae6eb0457b50b540cb7e4b3cb4bc";
  }

  static const char* value(const ::robots::FinDeplacerPiece_Msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9603ae6eb0457b50ULL;
  static const uint64_t static_value2 = 0xb540cb7e4b3cb4bcULL;
};

template<class ContainerAllocator>
struct DataType< ::robots::FinDeplacerPiece_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robots/FinDeplacerPiece_Msg";
  }

  static const char* value(const ::robots::FinDeplacerPiece_Msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robots::FinDeplacerPiece_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int32 FinDeplacerR1\n"
"int32 FinDeplacerR4\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::robots::FinDeplacerPiece_Msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robots::FinDeplacerPiece_Msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.FinDeplacerR1);
      stream.next(m.FinDeplacerR4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FinDeplacerPiece_Msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robots::FinDeplacerPiece_Msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robots::FinDeplacerPiece_Msg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "FinDeplacerR1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.FinDeplacerR1);
    s << indent << "FinDeplacerR4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.FinDeplacerR4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTS_MESSAGE_FINDEPLACERPIECE_MSG_H
