# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from motoman_msgs/Vitesse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Vitesse(genpy.Message):
  _md5sum = "52d3ce6c29b4c50bf41f808ef8927416"
  _type = "motoman_msgs/Vitesse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Vitesse des axes en 0.0001 deg/sec
float32 vit_s
float32 vit_l
float32 vit_u
float32 vit_r
float32 vit_b
float32 vit_t
#Vitesse de la TCP
float32 vit_tcp
"""
  __slots__ = ['vit_s','vit_l','vit_u','vit_r','vit_b','vit_t','vit_tcp']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vit_s,vit_l,vit_u,vit_r,vit_b,vit_t,vit_tcp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Vitesse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vit_s is None:
        self.vit_s = 0.
      if self.vit_l is None:
        self.vit_l = 0.
      if self.vit_u is None:
        self.vit_u = 0.
      if self.vit_r is None:
        self.vit_r = 0.
      if self.vit_b is None:
        self.vit_b = 0.
      if self.vit_t is None:
        self.vit_t = 0.
      if self.vit_tcp is None:
        self.vit_tcp = 0.
    else:
      self.vit_s = 0.
      self.vit_l = 0.
      self.vit_u = 0.
      self.vit_r = 0.
      self.vit_b = 0.
      self.vit_t = 0.
      self.vit_tcp = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7f().pack(_x.vit_s, _x.vit_l, _x.vit_u, _x.vit_r, _x.vit_b, _x.vit_t, _x.vit_tcp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.vit_s, _x.vit_l, _x.vit_u, _x.vit_r, _x.vit_b, _x.vit_t, _x.vit_tcp,) = _get_struct_7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7f().pack(_x.vit_s, _x.vit_l, _x.vit_u, _x.vit_r, _x.vit_b, _x.vit_t, _x.vit_tcp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.vit_s, _x.vit_l, _x.vit_u, _x.vit_r, _x.vit_b, _x.vit_t, _x.vit_tcp,) = _get_struct_7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
